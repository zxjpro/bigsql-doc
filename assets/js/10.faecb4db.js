(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{200:function(a,s,n){"use strict";n.r(s);var t=n(0),p=Object(t.a)({},function(){var a=this.$createElement;return(this._self._c||a)("div",{staticClass:"content"},[this._ssrNode('<h1 id="分布式主键"><a href="#分布式主键" aria-hidden="true" class="header-anchor">#</a> 分布式主键</h1><p>在分布式系统中，我们不能设置主键为自动增长，因为不同的表中，会产生重复的主键，所以常用的作法是使用UUID来作为主键，这样可以保证不重复</p><p>但是我们有的时候要求主键的生成是有序的，因为我们这样可以对数据进行一些排序处理。所以bigsql提供了分布式主键的功能，提供了有序的一个long类型的主键</p><h2 id="snowflake"><a href="#snowflake" aria-hidden="true" class="header-anchor">#</a> snowflake</h2><p>bigsql采用的是推特开源的一个分布式主键生成算法，可以在没有中心节点的情况下，生成一个64位的整型，我们可以在配置文件中设置指定的列为分布式主键</p><p>使用方法如下，进入逻辑表的规则配置，找到<code>properties</code>标签，添加下面的内容：</p><div class="language-xml extra-class"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">&gt;</span></span>incrementColumn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 我们可以添加多个列 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>columnName0,columnName1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>snowflake生成的是一个有序，但是不连续的64位整数，java的long类型刚好可以接收，其它语言请使用合适的数据类型，同时数据库中，该列需要能存储18个长度的整数</p></div><div class="tip custom-block"><p class="custom-block-title">扩展</p><p>其实不仅仅是主键，我们任意一个列，都可以使用自增长的方式。</p><p>如果insert语句中已经指定了该列的值，那么分布式主键的策略将会不生效，使用SQL语句中指定的值为准。</p></div><p>最后，感谢推特公司开源的snowflake</p>')])},[],!1,null,null,"5bc2b67a");s.default=p.exports}}]);