(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{208:function(a,s,n){"use strict";n.r(s);var e=n(0),t=Object(e.a)({},function(){var a=this.$createElement,s=this._self._c||a;return s("div",{staticClass:"content"},[this._ssrNode('<h1 id="小提示"><a href="#小提示" aria-hidden="true" class="header-anchor">#</a> 小提示</h1><h2 id="尽可能的少用join"><a href="#尽可能的少用join" aria-hidden="true" class="header-anchor">#</a> 尽可能的少用join</h2><p>在分布式关系型数据库中，我们需要尽可能的少用join，因为本身join字段出现在分布式关系型数据库中就是不合理的存在，在分库分表中，我们无法利用到数据库自带的索引来进行join，\n只能依靠中间件自己实现，但是性能却非常低，甚至很多公司在分布式关系型数据库中都是禁用join的。</p><p>解决方案：</p><ul><li>合理的设计表结构，当我们考虑某一个表做分片时，我们就该想清楚，这个表该做什么，不该做什么，适用的业务场景是什么。如果涉及报表之类的查询，为什么不用别的方案呢？spark,hadoop，或者一些nosql数据库？</li><li>合理的对一些数据进行冗余。这需要我们对目前的数据库非常了解，并且知道当前的业务情况，并且对未来发生的变化有一些规划，才能合理的对数据表进行冗余，这是分布式数据库中常用的方案。</li></ul><h2 id="数据源配置"><a href="#数据源配置" aria-hidden="true" class="header-anchor">#</a> 数据源配置</h2><p>conf/datasource/目录中是配置物理数据源的文件，所以我们可能对它的安全性要求很高，所以我们可以用一个特殊的用户启动bigsql,\n然后conf/datasource/只对这个用户读取写权限，其它的用户则就没有读写权限，则可以保证数据源配置参数的安全</p><p>总结起来就是设置该文件的读取权限，让其它用户没有读取权限就行了嘛</p><h2 id="编码"><a href="#编码" aria-hidden="true" class="header-anchor">#</a> 编码</h2><p>无论是bigsql,还是后端mysql实例，或者是应用程序，为了避免问题，请尽量使用utf8mb4,utf8,utf8_general_ci</p><h2 id="刷新数据源配置"><a href="#刷新数据源配置" aria-hidden="true" class="header-anchor">#</a> 刷新数据源配置</h2><p>bigsql提供了在不停机的情况下，增加数据源配置的功能，但是值得注意的是，bigsql并不会修改任何已经加载过的数据源，因为该数据源有可能正在使用，\nbigsql只会对新增加的数据源进行增加，所以请不要修改之前的数据源，特别是修改数据源的name，这会引发无法加载正确的数据源的问题。</p><h2 id="使用mysql命令行"><a href="#使用mysql命令行" aria-hidden="true" class="header-anchor">#</a> 使用mysql命令行</h2><p>当我们使用mysql命令行客户端时</p><div class="language-sh extra-class"><pre class="language-text"><code>mysql -P 3307 -h 10.8.1.69 -u root -p\nuse database;\n</code></pre></div><p>在执行切换数据库时，会卡住，出现如下信息，并且永远卡死在这里</p><div class="language- extra-class"><pre class="language-text"><code>mysql&gt; use sharding;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n</code></pre></div><p>其实按照这里给出来的提示，我们需要在启动mysql客户端时加上-A参数就行了，如下</p><div class="language-sh extra-class"><pre class="language-text"><code>mysql -P 3307 -h 10.8.1.69 -u root -p -A\n</code></pre></div><p>加上<code>-A</code>就代表着不会预读数据库信息，就可以正常执行后面的操作</p><h2 id="sql查询顺序"><a href="#sql查询顺序" aria-hidden="true" class="header-anchor">#</a> SQL查询顺序</h2><p>我们编写SQL时，需要把带有分片的表名写在前面，bigsql会加载第一个表的分片策略。</p><p>假如我们对table_b进行了分片，我们要对table_a进行join</p><div class="language-sql extra-class"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_b b <span class="token keyword">inner</span> <span class="token keyword">join</span> table_a <span class="token keyword">on</span> a<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>id\n</code></pre></div><p>也就是说，我们要以分片表为主表进行join。</p><h2 id="分片键"><a href="#分片键" aria-hidden="true" class="header-anchor">#</a> 分片键</h2><ul><li>如果一个语句不带有分片键，那么将会引发全表扫描。</li><li>如果<code>INSERT</code>语句中不带有分片键，那么将会返回ERROR，无法执行。</li></ul><h2 id="命名限制"><a href="#命名限制" aria-hidden="true" class="header-anchor">#</a> 命名限制</h2>'),this._ssrNode("<ul>","</ul>",[this._ssrNode("<li>一个表中的字段名，不能与表名一致。</li><li>不要使用MYSQL中的关键字在数据库中命名。</li>"),this._ssrNode("<li>","</li>",[this._ssrNode("不要使用bigsql中的关键字在数据库中命名，"),s("router-link",{attrs:{to:"/guide/keyword.html"}},[this._v("bigsql关键字")])],2)],2),this._ssrNode('<h2 id="insert语句写法"><a href="#insert语句写法" aria-hidden="true" class="header-anchor">#</a> INSERT语句写法</h2><p>insert语句中，必须写明要插入哪些字段，如下</p><div class="language-sql extra-class"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tableName<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>而不能写成</p><div class="language-sql extra-class"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tableName <span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="对分片键建立索引"><a href="#对分片键建立索引" aria-hidden="true" class="header-anchor">#</a> 对分片键建立索引</h2><p>对bigsql的分片键，在对应的每个mysql实例中的每个分表，都建议建立相应的索引，这会提高在每个分表的查询速度。</p>')],2)},[],!1,null,null,"20dd8b00");s.default=t.exports}}]);