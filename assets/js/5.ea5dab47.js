(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{205:function(a,s,e){"use strict";e.r(s);var r=e(0),i=Object(r.a)({},function(){var a=this.$createElement;return(this._self._c||a)("div",{staticClass:"content"},[this._ssrNode('<h1 id="插件"><a href="#插件" aria-hidden="true" class="header-anchor">#</a> 插件</h1><h2 id="什么是插件"><a href="#什么是插件" aria-hidden="true" class="header-anchor">#</a> 什么是插件</h2><p>我们先定义一下什么是插件吧！</p><p>之所以没有把插件的文档放到开发文档里面，是因为插件是<strong>独立</strong>的，为什么要用独立这个词？因为插件可以是一个又一个独立的jar包，使用这些插件只需要把jar包放到指定的位置就行了，不需要重新编译打包bigsql。</p><p>我们甚至为插件提供了不停机增加插件的机制，当我们编写完成自己的插件时，我们并不需要关掉bigsql，因为bigsql作为数据库代理，重要性不可言语，所以我们支持了运行时增加插件的机制。</p><div class="tip custom-block"><p class="custom-block-title">小提示</p><p>编写自己的插件，只是简单的实现一个接口中的几个方法就行了哦，快去试一试吧</p></div><h2 id="sql拦截器"><a href="#sql拦截器" aria-hidden="true" class="header-anchor">#</a> SQL拦截器</h2><p>提供了修改客户端提交SQL的能力，比如说数据表的平滑迁移，我们可能要把user表的数据迁移到user_info表中，我们就可以拦截这个SQL，\n把操作user表的SQL慢慢改成user_info表，这在数据迁移的过程中是很常见的。</p><h2 id="切片策略"><a href="#切片策略" aria-hidden="true" class="header-anchor">#</a> 切片策略</h2><p>可以自定义分片策略</p>')])},[],!1,null,null,"3d7cb865");s.default=i.exports}}]);